name: Tests
on:
  pull_request:
    branches:
      - master
  schedule:
  - cron:  '0 0 * * *'
  repository_dispatch:
    types: [master-tests]
env:
  GO111MODULE: on

jobs:

  tests:
    if: "false" # Ignore step because there is no test data previously stored in bintray
    name: Go Test (with coverage)
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download modules
      run: go mod download
      shell: bash

    - name: Prepare environment
      run: |
        export MULTIWERF_TEST_COVERAGE_DIR=$GITHUB_WORKSPACE/tests_coverage/${{ matrix.os }}
        mkdir -p $MULTIWERF_TEST_COVERAGE_DIR
        echo "MULTIWERF_TEST_COVERAGE_DIR=$MULTIWERF_TEST_COVERAGE_DIR" >> $GITHUB_ENV

        ./scripts/tests/multiwerf_with_coverage.sh
      shell: bash

    - name: Run tests (!windows-latest)
      run: MULTIWERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/multiwerf_with_coverage go test ./...
      shell: bash
      if: matrix.os != 'windows-latest'

    - name: Run tests (windows-latest)
      run: MULTIWERF_TEST_BINARY_PATH=$GITHUB_WORKSPACE/bin/tests/multiwerf_with_coverage.exe go test ./...
      shell: bash
      if: matrix.os == 'windows-latest'

    - name: Upload coverage artifact
      uses: actions/upload-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

  use_command:
    name: Use Command
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        shell: [sh, bash, cmd, powershell]
        exclude:
        - os: ubuntu-latest
          shell: cmd
        - os: ubuntu-latest
          shell: powershell
        - os: macOS-latest
          shell: cmd
        - os: macOS-latest
          shell: powershell
        - os: windows-latest
          shell: sh
    runs-on: ${{ matrix.os }}
    steps:

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Build multiwerf
      run: |
        export GOBIN=$GITHUB_WORKSPACE
        echo "$GOBIN" >> $GITHUB_PATH
        ./go-build.sh
      shell: bash

    - name: Setup environment
      run: |
        export MULTIWERF_STORAGE_DIR=$PWD/.multiwerf
        mkdir $MULTIWERF_STORAGE_DIR
        echo "MULTIWERF_STORAGE_DIR=$MULTIWERF_STORAGE_DIR" >> $GITHUB_ENV
      shell: bash
      if: matrix.os == 'windows-latest'

    - name: Install werf (sh)
      run: |
        . $(multiwerf use 1.0 stable --as-file --self-update=no --shell default)
        werf
      shell: sh
      if: matrix.shell == 'sh'

    - name: Install werf (bash)
      run: |
        . $(multiwerf use 1.0 stable --as-file --self-update=no --shell default)
        werf
      shell: bash
      if: matrix.shell == 'bash'

    - name: Install werf (cmd)
      run: |
        FOR /F "tokens=*" %%g IN ('multiwerf use 1.0 stable --as-file --self-update=no --shell cmdexe') do (SET WERF_USE_SCRIPT_PATH=%%g)
        %WERF_USE_SCRIPT_PATH%
        werf
      shell: cmd
      if: matrix.shell == 'cmd'

    - name: Install werf (powershell)
      run: |
        Invoke-Expression -Command "multiwerf use 1.0 stable --as-file --self-update=no --shell powershell" | Out-String -OutVariable WERF_USE_SCRIPT_PATH
        . $WERF_USE_SCRIPT_PATH.Trim()
        werf
      shell: powershell
      if: matrix.shell == 'powershell'

    - name: Self-update in the background (sh)
      run: |
        . $(multiwerf use 1.0 stable --as-file --self-update=yes --try-trdl=no --shell default)
        old_multiwerf_version=$(multiwerf version)

        werf

        ps aux | grep '[m]ultiwerf'
        while ps aux | grep '[m]ultiwerf'
        do
          echo "sleep for 1 second"
          sleep 1
        done

        current_multiwerf_version=$(multiwerf version)
        echo "old: $old_multiwerf_version, current: $current_multiwerf_version"
        [ "$old_multiwerf_version" != "$current_multiwerf_version" ] || exit 1
      shell: sh
      if: matrix.shell == 'sh'

    - name: Self-update in the background (bash)
      run: |
        . $(multiwerf use 1.0 stable --as-file --self-update=yes --try-trdl=no --shell default)
        old_multiwerf_version=$(multiwerf version)

        werf

        ps aux | grep '[m]ultiwerf'
        while ps aux | grep '[m]ultiwerf'
        do
          echo "sleep for 1 second"
          sleep 1
        done

        current_multiwerf_version=$(multiwerf version)
        echo "old: $old_multiwerf_version, current: $current_multiwerf_version"
        [ "$old_multiwerf_version" != "$current_multiwerf_version" ] || exit 1
      shell: bash
      if: matrix.shell == 'bash' && matrix.os != 'windows-latest'

    - name: Self-update in the background (bash, windows-latest)
      run: |
        . $(multiwerf use 1.0 stable --as-file --self-update=yes --try-trdl=no --shell default)
        old_multiwerf_version=$(multiwerf version)

        werf

        sleep 10

        current_multiwerf_version=$(multiwerf version)
        echo "old: $old_multiwerf_version, current: $current_multiwerf_version"
        [ "$old_multiwerf_version" != "$current_multiwerf_version" ] || exit 1
      shell: bash
      if: matrix.shell == 'bash' && matrix.os == 'windows-latest'

    - name: Self-update in the background (cmd)
      run: |
        FOR /F "tokens=*" %%g IN ('multiwerf use 1.0 stable --as-file --self-update=yes --try-trdl=no --shell cmdexe') do (SET WERF_USE_SCRIPT_PATH=%%g)
        %WERF_USE_SCRIPT_PATH%
        FOR /F "tokens=*" %%g IN ('multiwerf version') do (SET old_multiwerf_version=%%g)

        werf

        timeout 10

        FOR /F "tokens=*" %%g IN ('multiwerf version') do (SET current_multiwerf_version=%%g)
        echo "old: %old_multiwerf_version%, current: %current_multiwerf_version%"
        if "%old_multiwerf_version%" != "%current_multiwerf_version%" (exit 1)
      shell: cmd
      if: matrix.shell == 'cmd'

    - name: Self-update in the background (powershell)
      run: |
        Invoke-Expression -Command "multiwerf use 1.0 stable --as-file --self-update=yes --try-trdl=no --shell powershell" | Out-String -OutVariable WERF_USE_SCRIPT_PATH
        . $WERF_USE_SCRIPT_PATH.Trim()
        Invoke-Expression -Command "multiwerf version" | Out-String -OutVariable old_multiwerf_version

        werf

        Start-Sleep -s 10

        Invoke-Expression -Command "multiwerf version" | Out-String -OutVariable current_multiwerf_version

        echo "old: $old_multiwerf_version"
        echo "current: $current_multiwerf_version"
        if ("$old_multiwerf_version" -eq "$current_multiwerf_version") { exit 1 }
      shell: powershell
      if: matrix.shell == 'powershell'

  upload_coverage:
    name: Upload coverage
    needs:
    - tests
    - use_command
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v1

    - name: Download coverage artifact
      uses: actions/download-artifact@master
      with:
        name: tests_coverage
        path: tests_coverage

    - name: Prepare environment
      run: |
        curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
        chmod +x ./cc-test-reporter

        go build github.com/wadey/gocovmerge
        chmod +x ./gocovmerge

        echo "MULTIWERF_TEST_COVERAGE_DIR=tests_coverage" >> $GITHUB_ENV

    # FIXME: determine problems with coverage records and remove seds
    - name: Prepare coverage file
      run: |
        find $MULTIWERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e "s|/home/runner/work/multiwerf/multiwerf|github.com/werf/multiwerf|g" {} +

        find $MULTIWERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e "s|/Users/runner/work/multiwerf/multiwerf|github.com/werf/multiwerf|g" {} +

        find $MULTIWERF_TEST_COVERAGE_DIR -type f -exec \
          sed -i -e 's|D:\\a\\multiwerf\\multiwerf\\cmd\\multiwerf\\main.go|github.com/werf/multiwerf/cmd/multiwerf/main.go|g' {} +

        coverage_files=$(find $MULTIWERF_TEST_COVERAGE_DIR -name '*.out')
        ./gocovmerge ${coverage_files[@]} > coverage.out

    - name: Format and upload
      run: |
        export GIT_BRANCH=${GITHUB_REF:11}
        export GIT_COMMIT_SHA=$GITHUB_SHA

        ./cc-test-reporter format-coverage \
          -t=gocov \
          -p=github.com/werf/multiwerf/ \
          coverage.out

        ./cc-test-reporter upload-coverage
      env:
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
